		/* BEGIN MENU VARS */
		private javax.swing.JMenuItem CustPhoneList;
    private javax.swing.JMenuItem VendorPhoneList;
    private javax.swing.JMenuItem backupItem;
    private javax.swing.JMenuItem checkMenuItem;
    private javax.swing.JMenuItem connectionsItem;
    private javax.swing.JMenuItem conversionImport;
    private javax.swing.JMenuItem creditsItem;
    private javax.swing.JMenuItem custReport;
    private javax.swing.JCheckBoxMenuItem enhancedModeBox;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenuItem exportItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem helpItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem infoItem;
    private javax.swing.JMenuItem inventoryItem;
    private javax.swing.JMenuItem inventoryReportItem;
    private javax.swing.JMenuItem invoiceItem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JMenuItem layoutManagerItem;
    private javax.swing.JMenuItem manualItem;
    private javax.swing.JMenuItem miscInvoiceReportItem;
    private javax.swing.JMenuItem newCompanyItem;
    private javax.swing.JMenuItem outstandingItem;
    
    private javax.swing.JMenuItem paymentSystemMenuItem;
    
    private javax.swing.JMenuItem prepaidItem;
    private javax.swing.JMenuItem quickItem;
    
    private javax.swing.JMenuItem reorderReport;
    private javax.swing.JMenu reportMenu;
    private javax.swing.JMenuItem revenueItem;
    
    private javax.swing.JMenuItem salesItem;
    private javax.swing.JMenuItem settingsItem;
    
    private javax.swing.JMenuItem switchItem;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JMenuItem upgradeExportItem;
    private javax.swing.JMenuItem upgradeImportItem;
    
    private javax.swing.JMenuItem vendorList;
    private javax.swing.JMenuItem workOrderItem;
		/* END MENU VARS */
		
		/* BEGIN MENU INST */
		jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newCompanyItem = new javax.swing.JMenuItem();
        backupItem = new javax.swing.JMenuItem();
        exportItem = new javax.swing.JMenuItem();
        upgradeExportItem = new javax.swing.JMenuItem();
        upgradeImportItem = new javax.swing.JMenuItem();
        conversionImport = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        settingsItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        switchItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        enhancedModeBox = new javax.swing.JCheckBoxMenuItem();
        toolsMenu = new javax.swing.JMenu();
        connectionsItem = new javax.swing.JMenuItem();
        inventoryItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        invoiceItem = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JSeparator();
        quickItem = new javax.swing.JMenuItem();
        checkMenuItem = new javax.swing.JMenuItem();
        workOrderItem = new javax.swing.JMenuItem();
        layoutManagerItem = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JSeparator();
        paymentSystemMenuItem = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JSeparator();
        prepaidItem = new javax.swing.JMenuItem();
        reportMenu = new javax.swing.JMenu();
        outstandingItem = new javax.swing.JMenuItem();
        salesItem = new javax.swing.JMenuItem();
        revenueItem = new javax.swing.JMenuItem();
        miscInvoiceReportItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        inventoryReportItem = new javax.swing.JMenuItem();
        reorderReport = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        custReport = new javax.swing.JMenuItem();
        CustPhoneList = new javax.swing.JMenuItem();
        vendorList = new javax.swing.JMenuItem();
        VendorPhoneList = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpItem = new javax.swing.JMenuItem();
        manualItem = new javax.swing.JMenuItem();
        infoItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JSeparator();
        creditsItem = new javax.swing.JMenuItem();

		/* END MENU INST */
		
		/* BEGIN MENU LISTENERS */
		jMenuBar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuBar1MouseClicked(evt);
            }
        });

        newCompanyItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/businessmanager/res/folder.png"))); // NOI18N
        newCompanyItem.setText("Open/Create New Company Folder");
        newCompanyItem.setToolTipText("Browse - Open or create a new company");
        newCompanyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCompanyItemActionPerformed(evt);
            }
        });
        fileMenu.add(newCompanyItem);

        backupItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, java.awt.event.InputEvent.CTRL_MASK));
        backupItem.setText("Backup to ZIP File");
        backupItem.setToolTipText("Create a backup of the company folder in a compressed file");
        backupItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupItemActionPerformed(evt);
            }
        });
        fileMenu.add(backupItem);

        exportItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/businessmanager/res/csv.png"))); // NOI18N
        exportItem.setText("Basic Export");
        exportItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportItem);

        upgradeExportItem.setText("Full Export");
        upgradeExportItem.setToolTipText("Creates a ZIP file containing a text file for each data table");
        upgradeExportItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upgradeExportItemActionPerformed(evt);
            }
        });
        fileMenu.add(upgradeExportItem);

        upgradeImportItem.setText("Full Import");
        upgradeImportItem.setToolTipText("Import a full text file backup into the current company");
        upgradeImportItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upgradeImportItemActionPerformed(evt);
            }
        });
        fileMenu.add(upgradeImportItem);

        conversionImport.setText("Convert from v1.4 Full Export");
        conversionImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conversionImportActionPerformed(evt);
            }
        });
        fileMenu.add(conversionImport);
        fileMenu.add(jSeparator1);

        settingsItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/businessmanager/res/load-settings.png"))); // NOI18N
        settingsItem.setText("Settings");
        settingsItem.setToolTipText("Customize & Configure Nevitium to your needs");
        settingsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsItemActionPerformed(evt);
            }
        });
        fileMenu.add(settingsItem);
        fileMenu.add(jSeparator3);

        switchItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/businessmanager/res/lock.png"))); // NOI18N
        switchItem.setText("Change User");
        switchItem.setToolTipText("Protect your data with security");
        switchItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchItemActionPerformed(evt);
            }
        });
        fileMenu.add(switchItem);

        exitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        exitItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/businessmanager/res/RRZE/log-out16.png"))); // NOI18N
        exitItem.setText("EXIT");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitItem);
        fileMenu.add(jSeparator10);

        enhancedModeBox.setSelected(true);
        enhancedModeBox.setText("Enhanced Mode");
        enhancedModeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enhancedModeBoxActionPerformed(evt);
            }
        });
        fileMenu.add(enhancedModeBox);

        jMenuBar1.add(fileMenu);

        toolsMenu.setMnemonic('T');
        toolsMenu.setText("Tools");
        toolsMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toolsMenuMouseClicked(evt);
            }
        });

        connectionsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        connectionsItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/businessmanager/res/list-all-participants.png"))); // NOI18N
        connectionsItem.setText("My Connections");
        connectionsItem.setToolTipText("Manage your contact information");
        connectionsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionsItemActionPerformed(evt);
            }
        });
        toolsMenu.add(connectionsItem);

        inventoryItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        inventoryItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/businessmanager/res/pen.png"))); // NOI18N
        inventoryItem.setText("My Inventory");
        inventoryItem.setToolTipText("Explore and modify your inventory and services");
        inventoryItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryItemActionPerformed(evt);
            }
        });
        toolsMenu.add(inventoryItem);
        toolsMenu.add(jSeparator4);

        invoiceItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        invoiceItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/businessmanager/res/ViewInvoice.png"))); // NOI18N
        invoiceItem.setMnemonic('F');
        invoiceItem.setText("My Invoices");
        invoiceItem.setToolTipText("View invoices, take payments and process returns");
        invoiceItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceItemActionPerformed(evt);
            }
        });
        toolsMenu.add(invoiceItem);
        toolsMenu.add(jSeparator6);

        quickItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        quickItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/businessmanager/res/Hand Scanner16.png"))); // NOI18N
        quickItem.setText("Quick Invoice");
        quickItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quickItemActionPerformed(evt);
            }
        });
        toolsMenu.add(quickItem);

        checkMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        checkMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/businessmanager/res/directory-object.png"))); // NOI18N
        checkMenuItem.setText("Print Checks");
        checkMenuItem.setToolTipText("Print standard computer checks on a laser or inkjet printer");
        checkMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(checkMenuItem);

        workOrderItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/businessmanager/res/adobe.gif"))); // NOI18N
        workOrderItem.setText("Blank Work Order");
        workOrderItem.setToolTipText("Prints a Blank Work Order");
        workOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workOrderItemActionPerformed(evt);
            }
        });
        toolsMenu.add(workOrderItem);

        layoutManagerItem.setText("Form Builder (beta)");
        layoutManagerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                layoutManagerItemActionPerformed(evt);
            }
        });
        toolsMenu.add(layoutManagerItem);
        toolsMenu.add(jSeparator8);

        paymentSystemMenuItem.setText("Launch Payment System");
        paymentSystemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentSystemMenuItemActionPerformed1(evt);
            }
        });
        toolsMenu.add(paymentSystemMenuItem);
        toolsMenu.add(jSeparator9);

        prepaidItem.setText("Prepaid Account Manager");
        prepaidItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prepaidItemActionPerformed(evt);
            }
        });
        toolsMenu.add(prepaidItem);

        jMenuBar1.add(toolsMenu);

        reportMenu.setMnemonic('R');
        reportMenu.setText("Reports");

        outstandingItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, java.awt.event.InputEvent.CTRL_MASK));
        outstandingItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outstandingItemActionPerformed(evt);
            }
        });
        reportMenu.add(outstandingItem);

        salesItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F10, java.awt.event.InputEvent.CTRL_MASK));
        salesItem.setText("Sales (COGS) Report");
        salesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesItemActionPerformed(evt);
            }
        });
        reportMenu.add(salesItem);

        revenueItem.setText("Revenue Report");
        revenueItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revenueItemActionPerformed(evt);
            }
        });
        reportMenu.add(revenueItem);

        miscInvoiceReportItem.setText("Misc Invoice Report");
        miscInvoiceReportItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miscInvoiceReportItemActionPerformed(evt);
            }
        });
        reportMenu.add(miscInvoiceReportItem);
        reportMenu.add(jSeparator2);

        inventoryReportItem.setText("Inventory Status Report");
        inventoryReportItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryReportItemActionPerformed(evt);
            }
        });
        reportMenu.add(inventoryReportItem);

        reorderReport.setText("Inventory Reorder Report");
        reorderReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reorderReportActionPerformed(evt);
            }
        });
        reportMenu.add(reorderReport);
        reportMenu.add(jSeparator5);

        custReport.setText("Customer List");
        custReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custReportActionPerformed(evt);
            }
        });
        reportMenu.add(custReport);

        CustPhoneList.setText("Customer Phone List");
        CustPhoneList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustPhoneListActionPerformed(evt);
            }
        });
        reportMenu.add(CustPhoneList);

        vendorList.setText("Supplier List");
        vendorList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vendorListActionPerformed(evt);
            }
        });
        reportMenu.add(vendorList);

        VendorPhoneList.setText("Supplier Phone List");
        VendorPhoneList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VendorPhoneListActionPerformed(evt);
            }
        });
        reportMenu.add(VendorPhoneList);

        jMenuBar1.add(reportMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText("Help");

        helpItem.setText("User Manual (www)");
        helpMenu.add(helpItem);

        manualItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        manualItem.setText("User Manual (local)");
        manualItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualItemActionPerformed(evt);
            }
        });
        helpMenu.add(manualItem);

        infoItem.setText("Info");
        infoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoItemActionPerformed(evt);
            }
        });
        helpMenu.add(infoItem);
        helpMenu.add(jSeparator7);

        creditsItem.setText("Credits");
        creditsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditsItemActionPerformed(evt);
            }
        });
        helpMenu.add(creditsItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);
		/* END MENU LISTENERS */
		
		/* BEGIN ACT PERF */
		private void workOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//event_workOrderItemActionPerformed
        
        boolean stat = ReportFactory.generateWorkOrder(props);
        if (stat == false) {
            javax.swing.JOptionPane.showMessageDialog(null, "A problem occurred while building the workorder.");
        }
        
		}//event_workOrderItemActionPerformed

		private void switchItemActionPerformed(java.awt.event.ActionEvent evt) {//event_switchItemActionPerformed
			secure(true, true);
		}//event_switchItemActionPerformed

		private void checkMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//event_checkMenuItemActionPerformed
        
        if (accessKey.checkCheck(500)){
        new CheckDialog(this,true, application, 0, 0, "");
        }else {
            
            accessKey.showMessage("Check Printing");
            
        }
        
		}//event_checkMenuItemActionPerformed

		private void upgradeImportItemActionPerformed(java.awt.event.ActionEvent evt) {//event_upgradeImportItemActionPerformed
        
        
        if (accessKey.checkExports(500)){
        int a = javax.swing.JOptionPane.showConfirmDialog(null,
                "This feature is intended for importing data from a Full Export of "+
                System.getProperty("line.separator")+
                "Nevitium into a blank database and will overwrite your data."+
                System.getProperty("line.separator")+"Do you want to continue?",
                "WARNING",JOptionPane.WARNING_MESSAGE);
        if (a == 0){upgradeImport();}
        }else {
            
            accessKey.showMessage("Export/Import");
                    
        }
        
		}//event_upgradeImportItemActionPerformed

		private void upgradeExportItemActionPerformed(java.awt.event.ActionEvent evt) {//event_upgradeExportItemActionPerformed
        
        /*
         *Get file name to export to (.zip file)
         *
         *Export all .db files including key fields
         *Export jrnls, hold & grps folders
         *
         */
        
        if (accessKey.checkExports(500)){
        upgradeExport();
        }else {
            
            accessKey.showMessage("Export");
            
        }
		}//event_upgradeExportItemActionPerformed

		private void exportItemActionPerformed(java.awt.event.ActionEvent evt) {//event_exportItemActionPerformed
       
        if (accessKey.checkExports(500)){
        new ExportDialog (null, true, dbsys);
        }else {
            
            accessKey.showMessage("Export");
            
        }
		}//event_exportItemActionPerformed

		private void reorderReportActionPerformed(java.awt.event.ActionEvent evt) {//event_reorderReportActionPerformed
        
        if (!accessKey.checkReports(300)){
            accessKey.showMessage("Reports");
            return;
        }
        sys_stat = ReportFactory.generateReorderReport(dbsys, props);
        showStatus();
        
		}//event_reorderReportActionPerformed

		private void vendorListActionPerformed(java.awt.event.ActionEvent evt) {//event_vendorListActionPerformed
                

        if (!accessKey.checkReports(500)){
            accessKey.showMessage("Customer/Supplier Reports");
            return;
        }
        sys_stat = ReportFactory.generateCustomerReport (dbsys, props, true);
		showStatus (); 
              
		}//event_vendorListActionPerformed

		private void VendorPhoneListActionPerformed(java.awt.event.ActionEvent evt) {//event_VendorPhoneListActionPerformed
        
        if (!accessKey.checkReports(500)){
            accessKey.showMessage("Customer/Supplier Reports");
            return;
        }

        sys_stat = ReportFactory.generatePhoneList(dbsys, props, false, 11);
        showStatus();
        
		}//event_VendorPhoneListActionPerformed

		private void CustPhoneListActionPerformed(java.awt.event.ActionEvent evt) {//event_CustPhoneListActionPerformed
        

        if (!accessKey.checkReports(500)){
            accessKey.showMessage("Customer/Supplier Reports");
            return;
        }
        sys_stat = ReportFactory.generatePhoneList(dbsys, props, true, 11);
        showStatus();
        
		}//event_CustPhoneListActionPerformed

		private void manualItemActionPerformed(java.awt.event.ActionEvent evt) {//event_manualItemActionPerformed
        
        
        DV.launchURL("file://"+ System.getProperty("user.dir") + 
                System.getProperty("file.separator")+
                "doc" + System.getProperty("file.separator") +"manual"+ System.getProperty("file.separator") + "index.html");
        
        
    }//event_manualItemActionPerformed

    private void helpItemActionPerformed(java.awt.event.ActionEvent evt) {//event_helpItemActionPerformed
        
        DV.launchURL("http://www.datavirtue.com/nevitium/manual/");
        
        
    }//event_helpItemActionPerformed

    private void revenueItemActionPerformed(java.awt.event.ActionEvent evt) {//event_revenueItemActionPerformed
        

        if (!accessKey.checkReports(500)){
            accessKey.showMessage("Financial Reports");
            return;
        }
        new ReportTableDialog(this, false, application, "revenue");

        
    }//event_revenueItemActionPerformed

    private void infoItemActionPerformed(java.awt.event.ActionEvent evt) {//event_infoItemActionPerformed
        
        goSettings();
        
    }//event_infoItemActionPerformed

    private void inventoryReportItemActionPerformed(java.awt.event.ActionEvent evt) {//event_inventoryReportItemActionPerformed

        if (!accessKey.checkReports(300)){
            accessKey.showMessage("Reports");
            return;
        }

       sys_stat = ReportFactory.generateInventoryStatusReport(dbsys, props);
       showStatus ();
        
    }//event_inventoryReportItemActionPerformed

    private void backupItemActionPerformed(java.awt.event.ActionEvent evt) {//event_backupItemActionPerformed
        backup();
    }//event_backupItemActionPerformed

    private void outstandingItemActionPerformed(java.awt.event.ActionEvent evt) {//event_outstandingItemActionPerformed
        
        openInvoiceReport();
        
    }//event_outstandingItemActionPerformed
	
	private void custReportActionPerformed(java.awt.event.ActionEvent evt) {//event_custReportActionPerformed
        

        if (!accessKey.checkReports(500)){
            accessKey.showMessage("Customer/Supplier Reports");
            return;
        }
        sys_stat = ReportFactory.generateCustomerReport (dbsys, props, false);
        showStatus ();
        
    }//event_custReportActionPerformed

    private void salesItemActionPerformed(java.awt.event.ActionEvent evt) {//event_salesItemActionPerformed
        
        if (!accessKey.checkReports(500)){
            accessKey.showMessage("Financial Reports");
            return;
        }
        new ReportTableDialog(this, false, application, "sales");
    }//event_salesItemActionPerformed

    private void quickItemActionPerformed(java.awt.event.ActionEvent evt) {//event_quickItemActionPerformed

        if (!accessKey.checkInvoice(300)){
            accessKey.showMessage("Invoice/Quote");
            return;
        }

        boolean small = Tools.getStringBool(props.getProp("SMALL SCREEN"));

            InvoiceDialog id = new InvoiceDialog(this, true, 0, application); //no select            id.setVisible(true);
            id.setVisible(true);
            sys_stat = id.getStat();
            id.dispose(); id = null;
            showStatus ();

        
    }//event_quickItemActionPerformed

    private void invoiceItemActionPerformed(java.awt.event.ActionEvent evt) {//event_invoiceItemActionPerformed

        if (!accessKey.checkManager(300)){
            accessKey.showMessage("Invoice Manager");
            return;
        }
        //InvoiceModel temp = (InvoiceModel) DV.DeSerial("data/hold/I.10010.inv");
        //  InvoiceModel temp = null;             
        //invDialog id = new invDialog (this, true, dbsys, cso, temp); //no select
        InvoiceManager i = new InvoiceManager(this, true, application);
        
        
        sys_stat = i.getStat();
        
        i.dispose();
        
        showStatus ();
    }//event_invoiceItemActionPerformed

    private void inventoryItemActionPerformed(java.awt.event.ActionEvent evt) {//event_inventoryItemActionPerformed
        boolean small = Tools.getStringBool(props.getProp("SMALL SCREEN"));

            java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        MyInventoryApp id = new MyInventoryApp (null, true, application, false);
                        
                    }
                });
            
            showStatus ();
      
    }//event_inventoryItemActionPerformed

    private void connectionsItemActionPerformed(java.awt.event.ActionEvent evt) {//event_connectionsItemActionPerformed
        Tools.playSound(getClass().getResource("/businessmanager/res/slip.wav"));
        MyConnectionsApp cd = new MyConnectionsApp (this, true, application,false, true,true);
        //cd.setVisible(true);
        
        showStatus ();
    }//event_connectionsItemActionPerformed

    private void settingsItemActionPerformed(java.awt.event.ActionEvent evt) {//event_settingsItemActionPerformed
        
        goSettings();
    }//event_settingsItemActionPerformed

	
	private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//event_exitItemActionPerformed
      
        closeAll();
        
    }//event_exitItemActionPerformed

    private void paymentSystemMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//event_paymentSystemMenuItemActionPerformed

        launchPaymentSystem();

    }//event_paymentSystemMenuItemActionPerformed

    private void creditsItemActionPerformed(java.awt.event.ActionEvent evt) {//event_creditsItemActionPerformed
        new CreditsDialog(this, true, "credits.txt");
    }//event_creditsItemActionPerformed

    private void prepaidItemActionPerformed(java.awt.event.ActionEvent evt) {//event_prepaidItemActionPerformed
        new GiftCardManager(this, true, application);
    }//event_prepaidItemActionPerformed

    private void conversionImportActionPerformed(java.awt.event.ActionEvent evt) {//event_conversionImportActionPerformed
        conversion14to15();
    }//event_conversionImportActionPerformed

    private void jMenuBar1MouseClicked(java.awt.event.MouseEvent evt) {//event_jMenuBar1MouseClicked

                
    }//event_jMenuBar1MouseClicked

    private void toolsMenuMouseClicked(java.awt.event.MouseEvent evt) {//event_toolsMenuMouseClicked
        Tools.playSound(getClass().getResource("/businessmanager/res/slip.wav"));
    }//event_toolsMenuMouseClicked

    private void enhancedModeBoxActionPerformed(java.awt.event.ActionEvent evt) {//event_enhancedModeBoxActionPerformed
        dbsys.setOptimized(enhancedModeBox.isSelected());
    }//event_enhancedModeBoxActionPerformed

    private void layoutManagerItemActionPerformed(java.awt.event.ActionEvent evt) {//event_layoutManagerItemActionPerformed
        new InvoiceLayoutManager(this.workingPath, "layouts"+file_sep+"layout.workorder.xml");
    }//event_layoutManagerItemActionPerformed

    private void miscInvoiceReportItemActionPerformed(java.awt.event.ActionEvent evt) {//event_miscInvoiceReportItemActionPerformed
        ReportFactory.generateCustomerStatement(application, 0);
    }//event_miscInvoiceReportItemActionPerformed

    private void paymentSystemMenuItemActionPerformed1(java.awt.event.ActionEvent evt) {
        launchPaymentSystem();
    }

		
		
		/* END ACT PERF */
		