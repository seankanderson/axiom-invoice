/*
 * Copyright (C) 2022 sean.anderson
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.datavirtue.axiom.ui.invoices;

import com.datavirtue.axiom.models.invoices.Invoice;
import com.datavirtue.axiom.models.invoices.PaymentActivityTableModel;
import com.datavirtue.axiom.services.InvoiceService;
import com.datavirtue.axiom.services.util.CurrencyUtil;
import com.google.inject.Inject;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import lombok.Getter;
import lombok.Setter;

/**
 *
 * @author sean.anderson
 */
@Getter @Setter
public class InvoiceGuiService {
    
    @Inject
    InvoiceService invoiceService;
    private String nl = System.getProperty("line.separator");
    
    public void deletePayment(Invoice invoice, JTable paymentTable) throws SQLException {

        int selectedPaymentRow = paymentTable.getSelectedRow();

        if (selectedPaymentRow < 0) {
            return;
        }

        
        var paymentTableModel = (PaymentActivityTableModel) paymentTable.getModel();
        var payment = paymentTableModel.getValueAt(selectedPaymentRow);

        if (payment.getPaymentType().getName().equalsIgnoreCase("return")) {

            int a = javax.swing.JOptionPane.showConfirmDialog(null,
                    "Deleting a payment entry generated by a product return will NOT reverse the return." + nl
                    + "The products will still show as being returned on this invoice." + nl
                    + "This action is not recommended.  Do you still want to delete it?",
                    "(Return) Credit Delete", JOptionPane.YES_NO_OPTION);
            if (a == 0) {
            } else {
                return;
            }
        }

        if (payment.getPaymentType().getName().equalsIgnoreCase("fee")) {

            int a = javax.swing.JOptionPane.showConfirmDialog(null,
                    "The best way to reverse a fee is to issue a credit." + nl
                    + "Do you still want to delete it?", "Fee Debit Delete", JOptionPane.YES_NO_OPTION);
            if (a == 0) {
            } else {
                return;
            }
        }

        /* Fall-through action */
        var confirmation = javax.swing.JOptionPane.showInputDialog("Type DELETE to continue.");
        if (confirmation == null || !confirmation.equalsIgnoreCase("delete")) {
            return;
        }

        // TODO: this unit of work needs a transaction scope
        invoiceService.deletePayment(payment);
        
        var amountDue = invoiceService.calculateInvoiceAmountDue(invoice);
        var previousStatus = invoice.getStatus();
        var newInvoiceStatus = invoiceService.calculateInvoicePaymentStatus(invoice);        
        invoice.setStatus(newInvoiceStatus);
        invoiceService.save(invoice);
        
        if (amountDue > 0) {
                       
            if (previousStatus == Invoice.InvoiceStatus.PAID || previousStatus == Invoice.InvoiceStatus.OPEN_OVERPAID) {
                javax.swing.JOptionPane.showMessageDialog(null,
                        "The invoice now shows a balance due of " + CurrencyUtil.money(amountDue) + nl
                        + "The status of the invoice has been changed to unpaid.");
            }
            
        }

        if (amountDue < 0) {

            javax.swing.JOptionPane.showMessageDialog(null,
                    "The invoice has a negative balance," + nl
                    + "showing that the customer has overpaid." + nl
                    + "Invoice status has been changed to OPEN_OVERPAID." + nl
                    + "Hint: Issue a refund payment to reconcile the invoice.");

        }

    }

}
