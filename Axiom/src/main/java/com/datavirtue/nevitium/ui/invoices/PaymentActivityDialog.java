/*
 * PaymentActivityDialog.java
 *
 * Created on Mar 25, 2011, 10:33:51 PM
 */
package com.datavirtue.axiom.ui.invoices;

import com.datavirtue.axiom.models.invoices.Invoice;
import com.datavirtue.axiom.models.invoices.PaymentActivityTableModel;
import com.datavirtue.axiom.models.settings.AppSettings;
import com.datavirtue.axiom.services.AppSettingsService;
import com.datavirtue.axiom.services.DiService;
import com.datavirtue.axiom.services.ExceptionService;
import com.datavirtue.axiom.services.InvoiceService;
import com.datavirtue.axiom.services.util.CurrencyUtil;
import com.datavirtue.axiom.services.util.DV;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author dataVirtue
 */
public class PaymentActivityDialog extends javax.swing.JDialog {

    private final Image winIcon;
    private Invoice currentInvoice;
    private InvoiceService invoiceService;
    private AppSettingsService appSettingsService;
    private final String nl = System.getProperty("line.separator");

    /**
     * Creates new form PaymentActivityDialog
     */
    public PaymentActivityDialog(java.awt.Frame parent, boolean modal, Invoice invoice) {
        super(parent, modal);

        var injector = DiService.getInjector();
        invoiceService = injector.getInstance(InvoiceService.class);
        appSettingsService = injector.getInstance(AppSettingsService.class);
        appSettingsService.setObjectType(AppSettings.class);

        Toolkit tools = Toolkit.getDefaultToolkit();
        winIcon = tools.getImage(getClass().getResource("/Orange.png"));
        this.currentInvoice = invoice;
        initComponents();
        java.awt.Dimension dim = DV.computeCenter((java.awt.Window) this);
        this.setLocation(dim.width, dim.height);

        this.setTitle("Payment Activity for Invoice Number: " + invoice.getInvoiceNumber());
        this.setPayments();
        this.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        paymentTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        toolBar = new javax.swing.JToolBar();
        payButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Payment Activity", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        paymentTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        paymentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "DATE", "TYPE", "REF", "AMOUNT", "BALANCE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        paymentTable.setToolTipText("Invoice Activity");
        jScrollPane3.setViewportView(paymentTable);

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Aha-16/enabled/Delete.png"))); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("Deletes entries from Payment Activity.");
        deleteButton.setMargin(new java.awt.Insets(2, 10, 2, 10));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addContainerGap())
        );

        toolBar.setFloatable(false);
        toolBar.setRollover(true);

        payButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Aha-24/enabled/Payment.png"))); // NOI18N
        payButton.setText("Payments");
        payButton.setToolTipText("Take a Payment, Record a Credit or Add Fees to the Selected Invoice");
        payButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        payButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        payButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        payButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payButtonActionPerformed(evt);
            }
        });
        toolBar.add(payButton);

        returnButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Aha-24/enabled/Undo v2.png"))); // NOI18N
        returnButton.setText("Returns");
        returnButton.setToolTipText("Process product returns from an invoice");
        returnButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        returnButton.setMargin(new java.awt.Insets(2, 6, 2, 6));
        returnButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });
        toolBar.add(returnButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toolBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        try {
            deletePayment();
        } catch (SQLException ex) {
            ExceptionService.showErrorDialog(this, ex, "Error deleting payment from database");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void payButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payButtonActionPerformed

        takePayment();
    }//GEN-LAST:event_payButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed

//        if (!accessKey.checkManager(500)){
//            accessKey.showMessage("Returns");
//            return;
//        }
        //new ReturnDialog(null, true, invoice, application);
        this.setPayments();

    }//GEN-LAST:event_returnButtonActionPerformed

    private void setPayments() {
        var tableModel = new PaymentActivityTableModel(new ArrayList(this.currentInvoice.getPaymentActivity()));
        paymentTable.setModel(tableModel);
    }

    private void deletePayment() throws SQLException {

        int row = paymentTable.getSelectedRow();

        if (row < 0) {
            return;
        }

        var tableModel = (PaymentActivityTableModel) this.paymentTable.getModel();
        var payment = tableModel.getValueAt(row);

        var paymentType = payment.getPaymentType();

        if (paymentType.getName().equalsIgnoreCase("return")) {

            int a = javax.swing.JOptionPane.showConfirmDialog(null,
                    "Deleting a payment entry generated by a product Return will NOT reverse the return." + nl
                    + "The products will still show as being returned on this invoice." + nl
                    + "This action is not recommended.  Do you still want to delete it?",
                    "(Return) Credit Delete", JOptionPane.YES_NO_OPTION);
            if (a == 0) {
            } else {
                return;
            }
        }

        if (paymentType.getName().equalsIgnoreCase("fee")) {

            int a = javax.swing.JOptionPane.showConfirmDialog(null,
                    "The best way to reverse a fee is to issue a credit." + nl
                    + "Do you still want to delete it?", "Fee Debit Delete", JOptionPane.YES_NO_OPTION);
            if (a == 0) {
            } else {
                return;
            }
        }

        var verification = JOptionPane.showInputDialog("Type DELETE to continue.");
        if (verification != null && verification.equalsIgnoreCase("delete")) {

            try {
                invoiceService.deletePayment(payment);
            } catch (SQLException ex) {
                ExceptionService.showErrorDialog(this, ex, "Error deleting payemtn from database");
            }

        }

        /* Get an Invoice instance for this invoice and check balance */
 /* if the balance is over 0.00 mark unpaid, save and refresh tables */
        var balance = invoiceService.calculateInvoiceAmountDue(currentInvoice);

        if (balance > 0) {
            boolean prevPdStatus = this.currentInvoice.isPaid();
            this.currentInvoice.setPaid(false);

            try {

                var result = invoiceService.save(this.currentInvoice);

                if (prevPdStatus && result > 0) {
                    javax.swing.JOptionPane.showMessageDialog(null,
                            "The invoice now shows a balance due of " + CurrencyUtil.money(balance) + nl
                            + "The status of the invoice has been changed to unpaid.");
                }
                return;
            } catch (SQLException e) {
                ExceptionService.showErrorDialog(this, e, "Error updating invoice status in database");
                return;
            }
        }

        if (balance < 0) {
            this.currentInvoice.setPaid(false);
            try {
                invoiceService.save(currentInvoice);
            } catch (SQLException ex) {
                ExceptionService.showErrorDialog(this, ex, "Error updating invoice status in database");
                return;
            }
            
            javax.swing.JOptionPane.showMessageDialog(null,
                    "The invoice now has a negative balance," + nl
                    + "showing that the customer has overpaid." + nl
                    + "Invoice status has been changed to unpaid so that" + nl
                    + " you can reconcile the invoice by issuing a refund.");

            return;
        }

        setPayments();

    }

    private void takePayment() {

        if (this.currentInvoice.isPaid()) {

            javax.swing.JOptionPane.showMessageDialog(this, "Invoice number " + this.currentInvoice.getInvoiceNumber() + " is marked as paid.");

        } else {

            PaymentDialog pd = new PaymentDialog(null, true, this.currentInvoice);
            pd.setVisible(true);

        }
        this.setPayments();
    }

    private void closeInvoice() {

        if (this.currentInvoice.isPaid() || this.currentInvoice.isVoided()) {

            javax.swing.JOptionPane.showMessageDialog(null, "You cannot close an invoice which is already PAID or VOID.");
            return;

        }

        //get typed verification
        //pay out the invoice and record a refund against it
        //refund == total cost of all items minus the amount that has been paid already
        var verification = JOptionPane.showInputDialog("To \"write off\" this invoice type CLOSE and click OK.");

        if (verification != null && verification.trim().equalsIgnoreCase("close")) {

            this.currentInvoice.setPaid(true);
            
            try {
                this.invoiceService.save(currentInvoice);
            } catch (SQLException ex) {
                ExceptionService.showErrorDialog(this, ex, "Error updating invoice status in database");
            }
            
        }
        this.setPayments();

    }

    private void voidAction() {

//        if (!accessKey.checkManager(500)) {
//            accessKey.showMessage("Void");
//            return;
//        }

        
        var verification = JOptionPane.showInputDialog("To void this invoice type VOID and click OK.");

        if (verification != null && verification.equalsIgnoreCase("void")) {

            
            this.currentInvoice.setVoided(true);

            try {
                invoiceService.save(currentInvoice);
            } catch (SQLException ex) {
                ExceptionService.showErrorDialog(this, ex, "Error updating invoice status in database");
            }
          
            // TODO: need to reverse any items -- add qty back to inventory (allow user to cancel this part)
            
            JOptionPane.showMessageDialog(null, "Invoice was VOIDED.");

        } else {

            JOptionPane.showMessageDialog(null, "Invoice was NOT voided.");

        }
        this.setPayments();

    }

    private void doHistoryReport() {
//        if (!accessKey.checkReports(500)) {
//            accessKey.showMessage("Customer/Supplier Reports");
//            return;
//        }
        //ReportFactory.generateCustomerStatement(application, new Contact());

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton payButton;
    private javax.swing.JTable paymentTable;
    private javax.swing.JButton returnButton;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

}
